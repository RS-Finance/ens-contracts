{
  "address": "0xE4d719b525E965c0D44247314941acB041B1e49d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract DNSSEC",
          "name": "_dnssec",
          "type": "address"
        },
        {
          "internalType": "contract PublicSuffixList",
          "name": "_suffixes",
          "type": "address"
        },
        {
          "internalType": "contract ENS",
          "name": "_ens",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NoOwnerRecordFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StaleProof",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "dnsname",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "inception",
          "type": "uint32"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "NewOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "suffixes",
          "type": "address"
        }
      ],
      "name": "NewPublicSuffixList",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "inceptions",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract DNSSEC",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "rrset",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "sig",
              "type": "bytes"
            }
          ],
          "internalType": "struct DNSSEC.RRSetWithSignature[]",
          "name": "input",
          "type": "tuple[]"
        }
      ],
      "name": "proveAndClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "rrset",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "sig",
              "type": "bytes"
            }
          ],
          "internalType": "struct DNSSEC.RRSetWithSignature[]",
          "name": "input",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "proveAndClaimWithResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PublicSuffixList",
          "name": "_suffixes",
          "type": "address"
        }
      ],
      "name": "setPublicSuffixList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "suffixes",
      "outputs": [
        {
          "internalType": "contract PublicSuffixList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x5b7c60c74f69b25dee3eda9e3ad5ce38ecd34a99c742ed22e96e755463b85bb2",
  "receipt": {
    "to": null,
    "from": "0x345A9cfC8C2A3C7689c07E18d9B0035EeC3eade1",
    "contractAddress": "0xE4d719b525E965c0D44247314941acB041B1e49d",
    "transactionIndex": 73,
    "gasUsed": "1690568",
    "logsBloom": "0x
    "blockHash": "0xa0b1ffa195bc99c6ba39f8114034d5285df8f1e685d5d9d96ba8a7e90da30f14",
    "transactionHash": "0x5b7c60c74f69b25dee3eda9e3ad5ce38ecd34a99c742ed22e96e755463b85bb2",
    "logs": [
      {
        "transactionIndex": 73,
        "blockNumber": 8078854,
        "transactionHash": "0x5b7c60c74f69b25dee3eda9e3ad5ce38ecd34a99c742ed22e96e755463b85bb2",
        "address": "0xE4d719b525E965c0D44247314941acB041B1e49d",
        "topics": [
          "0xb3eacd0e351fafdfefdec84e1cd19679b38dbcd63ea7c2c24da17fd2bc3b3c0e"
        ],
        "data": "0x0000000000000000000000003eb09653c156d426a6ebf3d18aa03b5368bed2e8",
        "logIndex": 119,
        "blockHash": "0xa0b1ffa195bc99c6ba39f8114034d5285df8f1e685d5d9d96ba8a7e90da30f14"
      },
      {
        "transactionIndex": 73,
        "blockNumber": 8078854,
        "transactionHash": "0x5b7c60c74f69b25dee3eda9e3ad5ce38ecd34a99c742ed22e96e755463b85bb2",
        "address": "0xE4d719b525E965c0D44247314941acB041B1e49d",
        "topics": [
          "0x9176b7f47e4504df5e5516c99d90d82ac7cbd49cc77e7f22ba2ac2f2e3a3eba8"
        ],
        "data": "0x00000000000000000000000071aeab69ee7726639efb7cb3f8d9fe8f7b5e3947",
        "logIndex": 120,
        "blockHash": "0xa0b1ffa195bc99c6ba39f8114034d5285df8f1e685d5d9d96ba8a7e90da30f14"
      }
    ],
    "blockNumber": 8078854,
    "cumulativeGasUsed": "12266322",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3eB09653c156D426a6eBF3d18Aa03b5368Bed2e8",
    "0x71AEAB69EE7726639EFB7Cb3F8D9Fe8f7b5E3947",
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
  ],
  "numDeployments": 2,
  "solcInputHash": "20d0cf755bdff128bd31fe4809ab35fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract DNSSEC\",\"name\":\"_dnssec\",\"type\":\"address\"},{\"internalType\":\"contract PublicSuffixList\",\"name\":\"_suffixes\",\"type\":\"address\"},{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NoOwnerRecordFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StaleProof\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dnsname\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"inception\",\"type\":\"uint32\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"NewOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"suffixes\",\"type\":\"address\"}],\"name\":\"NewPublicSuffixList\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"inceptions\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract DNSSEC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"rrset\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct DNSSEC.RRSetWithSignature[]\",\"name\":\"input\",\"type\":\"tuple[]\"}],\"name\":\"proveAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"rrset\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct DNSSEC.RRSetWithSignature[]\",\"name\":\"input\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"proveAndClaimWithResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PublicSuffixList\",\"name\":\"_suffixes\",\"type\":\"address\"}],\"name\":\"setPublicSuffixList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suffixes\",\"outputs\":[{\"internalType\":\"contract PublicSuffixList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An ENS registrar that allows the owner of a DNS name to claim the      corresponding name in ENS.\",\"kind\":\"dev\",\"methods\":{\"proveAndClaim(bytes,(bytes,bytes)[])\":{\"details\":\"Submits proofs to the DNSSEC oracle, then claims a name using those proofs.\",\"params\":{\"input\":\"A chain of signed DNS RRSETs ending with a text record.\",\"name\":\"The name to claim, in DNS wire format.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dnsregistrar/DNSRegistrar.sol\":\"DNSRegistrar\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2500},\"remappings\":[]},\"sources\":{\"@ensdomains/buffer/contracts/Buffer.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for writing to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            mstore(0x40, add(32, add(ptr, capacity)))\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    function max(uint a, uint b) private pure returns(uint) {\\n        if (a > b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param off The start offset to write to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function write(buffer memory buf, uint off, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        if (off + len > buf.capacity) {\\n            resize(buf, max(buf.capacity, len + off) * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(add(len, off), buflen) {\\n                mstore(bufptr, add(len, off))\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, len);\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param off The offset to write the byte at.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function writeUint8(buffer memory buf, uint off, uint8 data) internal pure returns(buffer memory) {\\n        if (off >= buf.capacity) {\\n            resize(buf, buf.capacity * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if eq(off, buflen) {\\n                mstore(bufptr, add(buflen, 1))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        return writeUint8(buf, buf.buf.length, data);\\n    }\\n\\n    /**\\n    * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param off The offset to write at.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function write(buffer memory buf, uint off, bytes32 data, uint len) private pure returns(buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + off + len\\n                let dest := add(add(bufptr, off), len)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(add(off, len), mload(bufptr)) {\\n                    mstore(bufptr, add(off, len))\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param off The offset to write at.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function writeBytes20(buffer memory buf, uint off, bytes20 data) internal pure returns (buffer memory) {\\n        return write(buf, off, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, 32);\\n    }\\n\\n    /**\\n    * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param off The offset to write at.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (right-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function writeInt(buffer memory buf, uint off, uint data, uint len) private pure returns(buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + off + sizeof(buffer length) + len\\n            let dest := add(add(bufptr, off), len)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(add(off, len), mload(bufptr)) {\\n                mstore(bufptr, add(off, len))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     * exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        return writeInt(buf, buf.buf.length, data, len);\\n    }\\n}\\n\",\"keccak256\":\"0x18e42be1a3e4f7b4442d7ab0b524af5e09163503439954faf0ab3792cce91caa\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dnsregistrar/DNSClaimChecker.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../dnssec-oracle/DNSSEC.sol\\\";\\r\\nimport \\\"../dnssec-oracle/BytesUtils.sol\\\";\\r\\nimport \\\"../dnssec-oracle/RRUtils.sol\\\";\\r\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\r\\n\\r\\nlibrary DNSClaimChecker {\\r\\n    using BytesUtils for bytes;\\r\\n    using RRUtils for *;\\r\\n    using Buffer for Buffer.buffer;\\r\\n\\r\\n    uint16 constant CLASS_INET = 1;\\r\\n    uint16 constant TYPE_TXT = 16;\\r\\n\\r\\n    function getOwnerAddress(bytes memory name, bytes memory data)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address, bool)\\r\\n    {\\r\\n        // Add \\\"_ens.\\\" to the front of the name.\\r\\n        Buffer.buffer memory buf;\\r\\n        buf.init(name.length + 5);\\r\\n        buf.append(\\\"\\\\x04_ens\\\");\\r\\n        buf.append(name);\\r\\n\\r\\n        for (\\r\\n            RRUtils.RRIterator memory iter = data.iterateRRs(0);\\r\\n            !iter.done();\\r\\n            iter.next()\\r\\n        ) {\\r\\n            bool found;\\r\\n            address addr;\\r\\n            (addr, found) = parseRR(data, iter.rdataOffset);\\r\\n            if (found) {\\r\\n                return (addr, true);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (address(0x0), false);\\r\\n    }\\r\\n\\r\\n    function parseRR(bytes memory rdata, uint256 idx)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address, bool)\\r\\n    {\\r\\n        while (idx < rdata.length) {\\r\\n            uint256 len = rdata.readUint8(idx);\\r\\n            idx += 1;\\r\\n\\r\\n            bool found;\\r\\n            address addr;\\r\\n            (addr, found) = parseString(rdata, idx, len);\\r\\n\\r\\n            if (found) return (addr, true);\\r\\n            idx += len;\\r\\n        }\\r\\n\\r\\n        return (address(0x0), false);\\r\\n    }\\r\\n\\r\\n    function parseString(\\r\\n        bytes memory str,\\r\\n        uint256 idx,\\r\\n        uint256 len\\r\\n    ) internal pure returns (address, bool) {\\r\\n        // TODO: More robust parsing that handles whitespace and multiple key/value pairs\\r\\n        if (str.readUint32(idx) != 0x613d3078) return (address(0x0), false); // 0x613d3078 == 'a=0x'\\r\\n        if (len < 44) return (address(0x0), false);\\r\\n        return hexToAddress(str, idx + 4);\\r\\n    }\\r\\n\\r\\n    function hexToAddress(bytes memory str, uint256 idx)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address, bool)\\r\\n    {\\r\\n        if (str.length - idx < 40) return (address(0x0), false);\\r\\n        uint256 ret = 0;\\r\\n        for (uint256 i = idx; i < idx + 40; i++) {\\r\\n            ret <<= 4;\\r\\n            uint256 x = str.readUint8(i);\\r\\n            if (x >= 48 && x < 58) {\\r\\n                ret |= x - 48;\\r\\n            } else if (x >= 65 && x < 71) {\\r\\n                ret |= x - 55;\\r\\n            } else if (x >= 97 && x < 103) {\\r\\n                ret |= x - 87;\\r\\n            } else {\\r\\n                return (address(0x0), false);\\r\\n            }\\r\\n        }\\r\\n        return (address(uint160(ret)), true);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3fbdaeae6620ed893c1ac6e1a8661d29ca114b5149475e3ee20558966f7efb4f\",\"license\":\"MIT\"},\"contracts/dnsregistrar/DNSRegistrar.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\r\\nimport \\\"../dnssec-oracle/BytesUtils.sol\\\";\\r\\nimport \\\"../dnssec-oracle/DNSSEC.sol\\\";\\r\\nimport \\\"../dnssec-oracle/RRUtils.sol\\\";\\r\\nimport \\\"../registry/ENSRegistry.sol\\\";\\r\\nimport \\\"../root/Root.sol\\\";\\r\\nimport \\\"../resolvers/profiles/AddrResolver.sol\\\";\\r\\nimport \\\"./DNSClaimChecker.sol\\\";\\r\\nimport \\\"./PublicSuffixList.sol\\\";\\r\\nimport \\\"./IDNSRegistrar.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev An ENS registrar that allows the owner of a DNS name to claim the\\r\\n *      corresponding name in ENS.\\r\\n */\\r\\n// TODO: Record inception time of any claimed name, so old proofs can't be used to revert changes to a name.\\r\\ncontract DNSRegistrar is IDNSRegistrar, IERC165 {\\r\\n    using BytesUtils for bytes;\\r\\n    using Buffer for Buffer.buffer;\\r\\n    using RRUtils for *;\\r\\n\\r\\n    ENS public immutable ens;\\r\\n    DNSSEC public immutable oracle;\\r\\n    PublicSuffixList public suffixes;\\r\\n    // A mapping of the most recent signatures seen for each claimed domain.\\r\\n    mapping(bytes32 => uint32) public inceptions;\\r\\n\\r\\n    error NoOwnerRecordFound();\\r\\n    error StaleProof();\\r\\n\\r\\n    struct OwnerRecord {\\r\\n        bytes name;\\r\\n        address owner;\\r\\n        address resolver;\\r\\n        uint64 ttl;\\r\\n    }\\r\\n\\r\\n    event Claim(\\r\\n        bytes32 indexed node,\\r\\n        address indexed owner,\\r\\n        bytes dnsname,\\r\\n        uint32 inception\\r\\n    );\\r\\n    event NewOracle(address oracle);\\r\\n    event NewPublicSuffixList(address suffixes);\\r\\n\\r\\n    constructor(\\r\\n        DNSSEC _dnssec,\\r\\n        PublicSuffixList _suffixes,\\r\\n        ENS _ens\\r\\n    ) {\\r\\n        oracle = _dnssec;\\r\\n        emit NewOracle(address(oracle));\\r\\n        suffixes = _suffixes;\\r\\n        emit NewPublicSuffixList(address(suffixes));\\r\\n        ens = _ens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This contract's owner-only functions can be invoked by the owner of the ENS root.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        Root root = Root(ens.owner(bytes32(0)));\\r\\n        address owner = root.owner();\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setPublicSuffixList(PublicSuffixList _suffixes) public onlyOwner {\\r\\n        suffixes = _suffixes;\\r\\n        emit NewPublicSuffixList(address(suffixes));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Submits proofs to the DNSSEC oracle, then claims a name using those proofs.\\r\\n     * @param name The name to claim, in DNS wire format.\\r\\n     * @param input A chain of signed DNS RRSETs ending with a text record.\\r\\n     */\\r\\n    function proveAndClaim(\\r\\n        bytes memory name,\\r\\n        DNSSEC.RRSetWithSignature[] memory input\\r\\n    ) public override {\\r\\n        (bytes32 rootNode, bytes32 labelHash, address addr) = _claim(\\r\\n            name,\\r\\n            input\\r\\n        );\\r\\n        ens.setSubnodeOwner(rootNode, labelHash, addr);\\r\\n    }\\r\\n\\r\\n    function proveAndClaimWithResolver(\\r\\n        bytes memory name,\\r\\n        DNSSEC.RRSetWithSignature[] memory input,\\r\\n        address resolver,\\r\\n        address addr\\r\\n    ) public override {\\r\\n        (bytes32 rootNode, bytes32 labelHash, address owner) = _claim(\\r\\n            name,\\r\\n            input\\r\\n        );\\r\\n        require(\\r\\n            msg.sender == owner,\\r\\n            \\\"Only owner can call proveAndClaimWithResolver\\\"\\r\\n        );\\r\\n        if (addr != address(0)) {\\r\\n            require(\\r\\n                resolver != address(0),\\r\\n                \\\"Cannot set addr if resolver is not set\\\"\\r\\n            );\\r\\n            // Set ourselves as the owner so we can set a record on the resolver\\r\\n            ens.setSubnodeRecord(\\r\\n                rootNode,\\r\\n                labelHash,\\r\\n                address(this),\\r\\n                resolver,\\r\\n                0\\r\\n            );\\r\\n            bytes32 node = keccak256(abi.encodePacked(rootNode, labelHash));\\r\\n            // Set the resolver record\\r\\n            AddrResolver(resolver).setAddr(node, addr);\\r\\n            // Transfer the record to the owner\\r\\n            ens.setOwner(node, owner);\\r\\n        } else {\\r\\n            ens.setSubnodeRecord(rootNode, labelHash, owner, resolver, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceID)\\r\\n        external\\r\\n        pure\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceID == type(IERC165).interfaceId ||\\r\\n            interfaceID == type(IDNSRegistrar).interfaceId;\\r\\n    }\\r\\n\\r\\n    function _claim(bytes memory name, DNSSEC.RRSetWithSignature[] memory input)\\r\\n        internal\\r\\n        returns (\\r\\n            bytes32 parentNode,\\r\\n            bytes32 labelHash,\\r\\n            address addr\\r\\n        )\\r\\n    {\\r\\n        (bytes memory data, uint32 inception) = oracle.verifyRRSet(input);\\r\\n\\r\\n        // Get the first label\\r\\n        uint256 labelLen = name.readUint8(0);\\r\\n        labelHash = name.keccak(1, labelLen);\\r\\n\\r\\n        // Parent name must be in the public suffix list.\\r\\n        bytes memory parentName = name.substring(\\r\\n            labelLen + 1,\\r\\n            name.length - labelLen - 1\\r\\n        );\\r\\n        require(\\r\\n            suffixes.isPublicSuffix(parentName),\\r\\n            \\\"Parent name must be a public suffix\\\"\\r\\n        );\\r\\n\\r\\n        // Make sure the parent name is enabled\\r\\n        parentNode = enableNode(parentName, 0);\\r\\n\\r\\n        bytes32 node = keccak256(abi.encodePacked(parentNode, labelHash));\\r\\n        if (!RRUtils.serialNumberGte(inception, inceptions[node])) {\\r\\n            revert StaleProof();\\r\\n        }\\r\\n        inceptions[node] = inception;\\r\\n\\r\\n        (addr, ) = DNSClaimChecker.getOwnerAddress(name, data);\\r\\n\\r\\n        emit Claim(node, addr, name, inception);\\r\\n    }\\r\\n\\r\\n    function enableNode(bytes memory domain, uint256 offset)\\r\\n        internal\\r\\n        returns (bytes32 node)\\r\\n    {\\r\\n        uint256 len = domain.readUint8(offset);\\r\\n        if (len == 0) {\\r\\n            return bytes32(0);\\r\\n        }\\r\\n\\r\\n        bytes32 parentNode = enableNode(domain, offset + len + 1);\\r\\n        bytes32 label = domain.keccak(offset + 1, len);\\r\\n        node = keccak256(abi.encodePacked(parentNode, label));\\r\\n        address owner = ens.owner(node);\\r\\n        require(\\r\\n            owner == address(0) || owner == address(this),\\r\\n            \\\"Cannot enable a name owned by someone else\\\"\\r\\n        );\\r\\n        if (owner != address(this)) {\\r\\n            if (parentNode == bytes32(0)) {\\r\\n                Root root = Root(ens.owner(bytes32(0)));\\r\\n                root.setSubnodeOwner(label, address(this));\\r\\n            } else {\\r\\n                ens.setSubnodeOwner(parentNode, label, address(this));\\r\\n            }\\r\\n        }\\r\\n        return node;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4269e48c4d6d1caa96de0d8780bcb19092023390cdf7fc4848b5f05d0e8f7dde\",\"license\":\"MIT\"},\"contracts/dnsregistrar/IDNSRegistrar.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../dnssec-oracle/DNSSEC.sol\\\";\\r\\n\\r\\ninterface IDNSRegistrar {\\r\\n    function proveAndClaim(\\r\\n        bytes memory name,\\r\\n        DNSSEC.RRSetWithSignature[] memory input\\r\\n    ) external;\\r\\n\\r\\n    function proveAndClaimWithResolver(\\r\\n        bytes memory name,\\r\\n        DNSSEC.RRSetWithSignature[] memory input,\\r\\n        address resolver,\\r\\n        address addr\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x3f7ce1d74be08cddcedf4df613bb3d8f0af8ecf6e083abf9a86ca56b803306bb\",\"license\":\"MIT\"},\"contracts/dnsregistrar/PublicSuffixList.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\ninterface PublicSuffixList {\\r\\n    function isPublicSuffix(bytes calldata name) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x01cc9882071ee7f2474558f34a641b1db20efcb04d675eb35eaea48c8c772325\"},\"contracts/dnssec-oracle/BytesUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nlibrary BytesUtils {\\r\\n    error OffsetOutOfBoundsError(uint256 offset, uint256 length);\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the keccak-256 hash of a byte range.\\r\\n     * @param self The byte string to hash.\\r\\n     * @param offset The position to start hashing at.\\r\\n     * @param len The number of bytes to hash.\\r\\n     * @return The hash of the byte range.\\r\\n     */\\r\\n    function keccak(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bytes32 ret) {\\r\\n        require(offset + len <= self.length);\\r\\n        assembly {\\r\\n            ret := keccak256(add(add(self, 32), offset), len)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a positive number if `other` comes lexicographically after\\r\\n     *      `self`, a negative number if it comes before, or zero if the\\r\\n     *      contents of the two bytes are equal.\\r\\n     * @param self The first bytes to compare.\\r\\n     * @param other The second bytes to compare.\\r\\n     * @return The result of the comparison.\\r\\n     */\\r\\n    function compare(bytes memory self, bytes memory other)\\r\\n        internal\\r\\n        pure\\r\\n        returns (int256)\\r\\n    {\\r\\n        return compare(self, 0, self.length, other, 0, other.length);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a positive number if `other` comes lexicographically after\\r\\n     *      `self`, a negative number if it comes before, or zero if the\\r\\n     *      contents of the two bytes are equal. Comparison is done per-rune,\\r\\n     *      on unicode codepoints.\\r\\n     * @param self The first bytes to compare.\\r\\n     * @param offset The offset of self.\\r\\n     * @param len    The length of self.\\r\\n     * @param other The second bytes to compare.\\r\\n     * @param otheroffset The offset of the other string.\\r\\n     * @param otherlen    The length of the other string.\\r\\n     * @return The result of the comparison.\\r\\n     */\\r\\n    function compare(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        uint256 len,\\r\\n        bytes memory other,\\r\\n        uint256 otheroffset,\\r\\n        uint256 otherlen\\r\\n    ) internal pure returns (int256) {\\r\\n        if(offset + len > self.length) {\\r\\n            revert OffsetOutOfBoundsError(offset + len, self.length);\\r\\n        }\\r\\n        if(otheroffset + otherlen > other.length) {\\r\\n            revert OffsetOutOfBoundsError(otheroffset + otherlen, other.length);\\r\\n        }\\r\\n        \\r\\n        uint256 shortest = len;\\r\\n        if (otherlen < len) shortest = otherlen;\\r\\n\\r\\n        uint256 selfptr;\\r\\n        uint256 otherptr;\\r\\n\\r\\n        assembly {\\r\\n            selfptr := add(self, add(offset, 32))\\r\\n            otherptr := add(other, add(otheroffset, 32))\\r\\n        }\\r\\n        for (uint256 idx = 0; idx < shortest; idx += 32) {\\r\\n            uint256 a;\\r\\n            uint256 b;\\r\\n            assembly {\\r\\n                a := mload(selfptr)\\r\\n                b := mload(otherptr)\\r\\n            }\\r\\n            if (a != b) {\\r\\n                // Mask out irrelevant bytes and check again\\r\\n                uint256 mask;\\r\\n                if (shortest - idx >= 32) {\\r\\n                    mask = type(uint256).max;\\r\\n                } else {\\r\\n                    mask = ~(2 ** (8 * (idx + 32 - shortest)) - 1);\\r\\n                }\\r\\n                int256 diff = int256(a & mask) - int256(b & mask);\\r\\n                if (diff != 0) return diff;\\r\\n            }\\r\\n            selfptr += 32;\\r\\n            otherptr += 32;\\r\\n        }\\r\\n\\r\\n        return int256(len) - int256(otherlen);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the two byte ranges are equal.\\r\\n     * @param self The first byte range to compare.\\r\\n     * @param offset The offset into the first byte range.\\r\\n     * @param other The second byte range to compare.\\r\\n     * @param otherOffset The offset into the second byte range.\\r\\n     * @param len The number of bytes to compare\\r\\n     * @return True if the byte ranges are equal, false otherwise.\\r\\n     */\\r\\n    function equals(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        bytes memory other,\\r\\n        uint256 otherOffset,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bool) {\\r\\n        return keccak(self, offset, len) == keccak(other, otherOffset, len);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the two byte ranges are equal with offsets.\\r\\n     * @param self The first byte range to compare.\\r\\n     * @param offset The offset into the first byte range.\\r\\n     * @param other The second byte range to compare.\\r\\n     * @param otherOffset The offset into the second byte range.\\r\\n     * @return True if the byte ranges are equal, false otherwise.\\r\\n     */\\r\\n    function equals(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        bytes memory other,\\r\\n        uint256 otherOffset\\r\\n    ) internal pure returns (bool) {\\r\\n        return\\r\\n            keccak(self, offset, self.length - offset) ==\\r\\n            keccak(other, otherOffset, other.length - otherOffset);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Compares a range of 'self' to all of 'other' and returns True iff\\r\\n     *      they are equal.\\r\\n     * @param self The first byte range to compare.\\r\\n     * @param offset The offset into the first byte range.\\r\\n     * @param other The second byte range to compare.\\r\\n     * @return True if the byte ranges are equal, false otherwise.\\r\\n     */\\r\\n    function equals(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        bytes memory other\\r\\n    ) internal pure returns (bool) {\\r\\n        return\\r\\n            self.length == offset + other.length &&\\r\\n            equals(self, offset, other, 0, other.length);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the two byte ranges are equal.\\r\\n     * @param self The first byte range to compare.\\r\\n     * @param other The second byte range to compare.\\r\\n     * @return True if the byte ranges are equal, false otherwise.\\r\\n     */\\r\\n    function equals(bytes memory self, bytes memory other)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            self.length == other.length &&\\r\\n            equals(self, 0, other, 0, self.length);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the 8-bit number at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes\\r\\n     * @return The specified 8 bits of the string, interpreted as an integer.\\r\\n     */\\r\\n    function readUint8(bytes memory self, uint256 idx)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint8 ret)\\r\\n    {\\r\\n        return uint8(self[idx]);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the 16-bit number at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes\\r\\n     * @return The specified 16 bits of the string, interpreted as an integer.\\r\\n     */\\r\\n    function readUint16(bytes memory self, uint256 idx)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint16 ret)\\r\\n    {\\r\\n        require(idx + 2 <= self.length);\\r\\n        assembly {\\r\\n            ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the 32-bit number at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes\\r\\n     * @return The specified 32 bits of the string, interpreted as an integer.\\r\\n     */\\r\\n    function readUint32(bytes memory self, uint256 idx)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint32 ret)\\r\\n    {\\r\\n        require(idx + 4 <= self.length);\\r\\n        assembly {\\r\\n            ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the 32 byte value at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes\\r\\n     * @return The specified 32 bytes of the string.\\r\\n     */\\r\\n    function readBytes32(bytes memory self, uint256 idx)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32 ret)\\r\\n    {\\r\\n        require(idx + 32 <= self.length);\\r\\n        assembly {\\r\\n            ret := mload(add(add(self, 32), idx))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the 32 byte value at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes\\r\\n     * @return The specified 32 bytes of the string.\\r\\n     */\\r\\n    function readBytes20(bytes memory self, uint256 idx)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes20 ret)\\r\\n    {\\r\\n        require(idx + 20 <= self.length);\\r\\n        assembly {\\r\\n            ret := and(\\r\\n                mload(add(add(self, 32), idx)),\\r\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the n byte value at the specified index of self.\\r\\n     * @param self The byte string.\\r\\n     * @param idx The index into the bytes.\\r\\n     * @param len The number of bytes.\\r\\n     * @return The specified 32 bytes of the string.\\r\\n     */\\r\\n    function readBytesN(\\r\\n        bytes memory self,\\r\\n        uint256 idx,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bytes32 ret) {\\r\\n        require(len <= 32);\\r\\n        require(idx + len <= self.length);\\r\\n        assembly {\\r\\n            let mask := not(sub(exp(256, sub(32, len)), 1))\\r\\n            ret := and(mload(add(add(self, 32), idx)), mask)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function memcpy(\\r\\n        uint256 dest,\\r\\n        uint256 src,\\r\\n        uint256 len\\r\\n    ) private pure {\\r\\n        // Copy word-length chunks while possible\\r\\n        for (; len >= 32; len -= 32) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n            dest += 32;\\r\\n            src += 32;\\r\\n        }\\r\\n\\r\\n        // Copy remaining bytes\\r\\n        unchecked {\\r\\n            uint256 mask = (256**(32 - len)) - 1;\\r\\n            assembly {\\r\\n                let srcpart := and(mload(src), not(mask))\\r\\n                let destpart := and(mload(dest), mask)\\r\\n                mstore(dest, or(destpart, srcpart))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Copies a substring into a new byte string.\\r\\n     * @param self The byte string to copy from.\\r\\n     * @param offset The offset to start copying at.\\r\\n     * @param len The number of bytes to copy.\\r\\n     */\\r\\n    function substring(\\r\\n        bytes memory self,\\r\\n        uint256 offset,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        require(offset + len <= self.length);\\r\\n\\r\\n        bytes memory ret = new bytes(len);\\r\\n        uint256 dest;\\r\\n        uint256 src;\\r\\n\\r\\n        assembly {\\r\\n            dest := add(ret, 32)\\r\\n            src := add(add(self, 32), offset)\\r\\n        }\\r\\n        memcpy(dest, src, len);\\r\\n\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    // Maps characters from 0x30 to 0x7A to their base32 values.\\r\\n    // 0xFF represents invalid characters in that range.\\r\\n    bytes constant base32HexTable =\\r\\n        hex\\\"00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Decodes unpadded base32 data of up to one word in length.\\r\\n     * @param self The data to decode.\\r\\n     * @param off Offset into the string to start at.\\r\\n     * @param len Number of characters to decode.\\r\\n     * @return The decoded data, left aligned.\\r\\n     */\\r\\n    function base32HexDecodeWord(\\r\\n        bytes memory self,\\r\\n        uint256 off,\\r\\n        uint256 len\\r\\n    ) internal pure returns (bytes32) {\\r\\n        require(len <= 52);\\r\\n\\r\\n        uint256 ret = 0;\\r\\n        uint8 decoded;\\r\\n        for (uint256 i = 0; i < len; i++) {\\r\\n            bytes1 char = self[off + i];\\r\\n            require(char >= 0x30 && char <= 0x7A);\\r\\n            decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\r\\n            require(decoded <= 0x20);\\r\\n            if (i == len - 1) {\\r\\n                break;\\r\\n            }\\r\\n            ret = (ret << 5) | decoded;\\r\\n        }\\r\\n\\r\\n        uint256 bitlen = len * 5;\\r\\n        if (len % 8 == 0) {\\r\\n            // Multiple of 8 characters, no padding\\r\\n            ret = (ret << 5) | decoded;\\r\\n        } else if (len % 8 == 2) {\\r\\n            // Two extra characters - 1 byte\\r\\n            ret = (ret << 3) | (decoded >> 2);\\r\\n            bitlen -= 2;\\r\\n        } else if (len % 8 == 4) {\\r\\n            // Four extra characters - 2 bytes\\r\\n            ret = (ret << 1) | (decoded >> 4);\\r\\n            bitlen -= 4;\\r\\n        } else if (len % 8 == 5) {\\r\\n            // Five extra characters - 3 bytes\\r\\n            ret = (ret << 4) | (decoded >> 1);\\r\\n            bitlen -= 1;\\r\\n        } else if (len % 8 == 7) {\\r\\n            // Seven extra characters - 4 bytes\\r\\n            ret = (ret << 2) | (decoded >> 3);\\r\\n            bitlen -= 3;\\r\\n        } else {\\r\\n            revert();\\r\\n        }\\r\\n\\r\\n        return bytes32(ret << (256 - bitlen));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Finds the first occurrence of the byte `needle` in `self`.\\r\\n     * @param self The string to search\\r\\n     * @param off The offset to start searching at\\r\\n     * @param len The number of bytes to search\\r\\n     * @param needle The byte to search for\\r\\n     * @return The offset of `needle` in `self`, or 2**256-1 if it was not found.\\r\\n     */\\r\\n    function find(\\r\\n        bytes memory self,\\r\\n        uint256 off,\\r\\n        uint256 len,\\r\\n        bytes1 needle\\r\\n    ) internal pure returns (uint256) {\\r\\n        for (uint256 idx = off; idx < off + len; idx++) {\\r\\n            if (self[idx] == needle) {\\r\\n                return idx;\\r\\n            }\\r\\n        }\\r\\n        return type(uint256).max;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x805ebf16dec9650ae9cf80381e036426d1382036e0bb534b119e4a9e27122633\"},\"contracts/dnssec-oracle/DNSSEC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nabstract contract DNSSEC {\\r\\n    bytes public anchors;\\r\\n\\r\\n    struct RRSetWithSignature {\\r\\n        bytes rrset;\\r\\n        bytes sig;\\r\\n    }\\r\\n\\r\\n    event AlgorithmUpdated(uint8 id, address addr);\\r\\n    event DigestUpdated(uint8 id, address addr);\\r\\n\\r\\n    function verifyRRSet(RRSetWithSignature[] memory input)\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        returns (bytes memory rrs, uint32 inception);\\r\\n\\r\\n    function verifyRRSet(RRSetWithSignature[] memory input, uint256 now)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (bytes memory rrs, uint32 inception);\\r\\n}\\r\\n\",\"keccak256\":\"0xb450be92d7bf083d1eaae5311dcc724de1d0c05f0b976c11ac23c145d8045970\",\"license\":\"MIT\"},\"contracts/dnssec-oracle/RRUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BytesUtils.sol\\\";\\r\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\r\\n */\\r\\nlibrary RRUtils {\\r\\n    using BytesUtils for *;\\r\\n    using Buffer for *;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\r\\n     * @param self The byte array to read a name from.\\r\\n     * @param offset The offset to start reading at.\\r\\n     * @return The length of the DNS name at 'offset', in bytes.\\r\\n     */\\r\\n    function nameLength(bytes memory self, uint256 offset)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 idx = offset;\\r\\n        while (true) {\\r\\n            assert(idx < self.length);\\r\\n            uint256 labelLen = self.readUint8(idx);\\r\\n            idx += labelLen + 1;\\r\\n            if (labelLen == 0) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        return idx - offset;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a DNS format name at the specified offset of self.\\r\\n     * @param self The byte array to read a name from.\\r\\n     * @param offset The offset to start reading at.\\r\\n     * @return ret The name.\\r\\n     */\\r\\n    function readName(bytes memory self, uint256 offset)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes memory ret)\\r\\n    {\\r\\n        uint256 len = nameLength(self, offset);\\r\\n        return self.substring(offset, len);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\r\\n     * @param self The byte array to read a name from.\\r\\n     * @param offset The offset to start reading at.\\r\\n     * @return The number of labels in the DNS name at 'offset', in bytes.\\r\\n     */\\r\\n    function labelCount(bytes memory self, uint256 offset)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 count = 0;\\r\\n        while (true) {\\r\\n            assert(offset < self.length);\\r\\n            uint256 labelLen = self.readUint8(offset);\\r\\n            offset += labelLen + 1;\\r\\n            if (labelLen == 0) {\\r\\n                break;\\r\\n            }\\r\\n            count += 1;\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    uint256 constant RRSIG_TYPE = 0;\\r\\n    uint256 constant RRSIG_ALGORITHM = 2;\\r\\n    uint256 constant RRSIG_LABELS = 3;\\r\\n    uint256 constant RRSIG_TTL = 4;\\r\\n    uint256 constant RRSIG_EXPIRATION = 8;\\r\\n    uint256 constant RRSIG_INCEPTION = 12;\\r\\n    uint256 constant RRSIG_KEY_TAG = 16;\\r\\n    uint256 constant RRSIG_SIGNER_NAME = 18;\\r\\n\\r\\n    struct SignedSet {\\r\\n        uint16 typeCovered;\\r\\n        uint8 algorithm;\\r\\n        uint8 labels;\\r\\n        uint32 ttl;\\r\\n        uint32 expiration;\\r\\n        uint32 inception;\\r\\n        uint16 keytag;\\r\\n        bytes signerName;\\r\\n        bytes data;\\r\\n        bytes name;\\r\\n    }\\r\\n\\r\\n    function readSignedSet(bytes memory data)\\r\\n        internal\\r\\n        pure\\r\\n        returns (SignedSet memory self)\\r\\n    {\\r\\n        self.typeCovered = data.readUint16(RRSIG_TYPE);\\r\\n        self.algorithm = data.readUint8(RRSIG_ALGORITHM);\\r\\n        self.labels = data.readUint8(RRSIG_LABELS);\\r\\n        self.ttl = data.readUint32(RRSIG_TTL);\\r\\n        self.expiration = data.readUint32(RRSIG_EXPIRATION);\\r\\n        self.inception = data.readUint32(RRSIG_INCEPTION);\\r\\n        self.keytag = data.readUint16(RRSIG_KEY_TAG);\\r\\n        self.signerName = readName(data, RRSIG_SIGNER_NAME);\\r\\n        self.data = data.substring(\\r\\n            RRSIG_SIGNER_NAME + self.signerName.length,\\r\\n            data.length - RRSIG_SIGNER_NAME - self.signerName.length\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function rrs(SignedSet memory rrset)\\r\\n        internal\\r\\n        pure\\r\\n        returns (RRIterator memory)\\r\\n    {\\r\\n        return iterateRRs(rrset.data, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev An iterator over resource records.\\r\\n     */\\r\\n    struct RRIterator {\\r\\n        bytes data;\\r\\n        uint256 offset;\\r\\n        uint16 dnstype;\\r\\n        uint16 class;\\r\\n        uint32 ttl;\\r\\n        uint256 rdataOffset;\\r\\n        uint256 nextOffset;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Begins iterating over resource records.\\r\\n     * @param self The byte string to read from.\\r\\n     * @param offset The offset to start reading at.\\r\\n     * @return ret An iterator object.\\r\\n     */\\r\\n    function iterateRRs(bytes memory self, uint256 offset)\\r\\n        internal\\r\\n        pure\\r\\n        returns (RRIterator memory ret)\\r\\n    {\\r\\n        ret.data = self;\\r\\n        ret.nextOffset = offset;\\r\\n        next(ret);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true iff there are more RRs to iterate.\\r\\n     * @param iter The iterator to check.\\r\\n     * @return True iff the iterator has finished.\\r\\n     */\\r\\n    function done(RRIterator memory iter) internal pure returns (bool) {\\r\\n        return iter.offset >= iter.data.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves the iterator to the next resource record.\\r\\n     * @param iter The iterator to advance.\\r\\n     */\\r\\n    function next(RRIterator memory iter) internal pure {\\r\\n        iter.offset = iter.nextOffset;\\r\\n        if (iter.offset >= iter.data.length) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Skip the name\\r\\n        uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\r\\n\\r\\n        // Read type, class, and ttl\\r\\n        iter.dnstype = iter.data.readUint16(off);\\r\\n        off += 2;\\r\\n        iter.class = iter.data.readUint16(off);\\r\\n        off += 2;\\r\\n        iter.ttl = iter.data.readUint32(off);\\r\\n        off += 4;\\r\\n\\r\\n        // Read the rdata\\r\\n        uint256 rdataLength = iter.data.readUint16(off);\\r\\n        off += 2;\\r\\n        iter.rdataOffset = off;\\r\\n        iter.nextOffset = off + rdataLength;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the current record.\\r\\n     * @param iter The iterator.\\r\\n     * @return A new bytes object containing the owner name from the RR.\\r\\n     */\\r\\n    function name(RRIterator memory iter) internal pure returns (bytes memory) {\\r\\n        return\\r\\n            iter.data.substring(\\r\\n                iter.offset,\\r\\n                nameLength(iter.data, iter.offset)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the rdata portion of the current record.\\r\\n     * @param iter The iterator.\\r\\n     * @return A new bytes object containing the RR's RDATA.\\r\\n     */\\r\\n    function rdata(RRIterator memory iter)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return\\r\\n            iter.data.substring(\\r\\n                iter.rdataOffset,\\r\\n                iter.nextOffset - iter.rdataOffset\\r\\n            );\\r\\n    }\\r\\n\\r\\n    uint256 constant DNSKEY_FLAGS = 0;\\r\\n    uint256 constant DNSKEY_PROTOCOL = 2;\\r\\n    uint256 constant DNSKEY_ALGORITHM = 3;\\r\\n    uint256 constant DNSKEY_PUBKEY = 4;\\r\\n\\r\\n    struct DNSKEY {\\r\\n        uint16 flags;\\r\\n        uint8 protocol;\\r\\n        uint8 algorithm;\\r\\n        bytes publicKey;\\r\\n    }\\r\\n\\r\\n    function readDNSKEY(\\r\\n        bytes memory data,\\r\\n        uint256 offset,\\r\\n        uint256 length\\r\\n    ) internal pure returns (DNSKEY memory self) {\\r\\n        self.flags = data.readUint16(offset + DNSKEY_FLAGS);\\r\\n        self.protocol = data.readUint8(offset + DNSKEY_PROTOCOL);\\r\\n        self.algorithm = data.readUint8(offset + DNSKEY_ALGORITHM);\\r\\n        self.publicKey = data.substring(\\r\\n            offset + DNSKEY_PUBKEY,\\r\\n            length - DNSKEY_PUBKEY\\r\\n        );\\r\\n    }\\r\\n\\r\\n    uint256 constant DS_KEY_TAG = 0;\\r\\n    uint256 constant DS_ALGORITHM = 2;\\r\\n    uint256 constant DS_DIGEST_TYPE = 3;\\r\\n    uint256 constant DS_DIGEST = 4;\\r\\n\\r\\n    struct DS {\\r\\n        uint16 keytag;\\r\\n        uint8 algorithm;\\r\\n        uint8 digestType;\\r\\n        bytes digest;\\r\\n    }\\r\\n\\r\\n    function readDS(\\r\\n        bytes memory data,\\r\\n        uint256 offset,\\r\\n        uint256 length\\r\\n    ) internal pure returns (DS memory self) {\\r\\n        self.keytag = data.readUint16(offset + DS_KEY_TAG);\\r\\n        self.algorithm = data.readUint8(offset + DS_ALGORITHM);\\r\\n        self.digestType = data.readUint8(offset + DS_DIGEST_TYPE);\\r\\n        self.digest = data.substring(offset + DS_DIGEST, length - DS_DIGEST);\\r\\n    }\\r\\n\\r\\n    function isSubdomainOf(bytes memory self, bytes memory other) \\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 off = 0;\\r\\n        uint256 counts = labelCount(self, 0);\\r\\n        uint256 othercounts = labelCount(other, 0);\\r\\n\\r\\n        while(counts > othercounts) {\\r\\n            off = progress(self, off);\\r\\n            counts--;\\r\\n        }\\r\\n\\r\\n        return self.equals(off, other, 0);\\r\\n    }\\r\\n\\r\\n    function compareNames(bytes memory self, bytes memory other)\\r\\n        internal\\r\\n        pure\\r\\n        returns (int256)\\r\\n    {\\r\\n        if (self.equals(other)) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 off;\\r\\n        uint256 otheroff;\\r\\n        uint256 prevoff;\\r\\n        uint256 otherprevoff;\\r\\n        uint256 counts = labelCount(self, 0);\\r\\n        uint256 othercounts = labelCount(other, 0);\\r\\n\\r\\n        // Keep removing labels from the front of the name until both names are equal length\\r\\n        while (counts > othercounts) {\\r\\n            prevoff = off;\\r\\n            off = progress(self, off);\\r\\n            counts--;\\r\\n        }\\r\\n\\r\\n        while (othercounts > counts) {\\r\\n            otherprevoff = otheroff;\\r\\n            otheroff = progress(other, otheroff);\\r\\n            othercounts--;\\r\\n        }\\r\\n\\r\\n        // Compare the last nonequal labels to each other\\r\\n        while (counts > 0 && !self.equals(off, other, otheroff)) {\\r\\n            prevoff = off;\\r\\n            off = progress(self, off);\\r\\n            otherprevoff = otheroff;\\r\\n            otheroff = progress(other, otheroff);\\r\\n            counts -= 1;\\r\\n        }\\r\\n\\r\\n        if (off == 0) {\\r\\n            return -1;\\r\\n        }\\r\\n        if (otheroff == 0) {\\r\\n            return 1;\\r\\n        }\\r\\n\\r\\n        return\\r\\n            self.compare(\\r\\n                prevoff + 1,\\r\\n                self.readUint8(prevoff),\\r\\n                other,\\r\\n                otherprevoff + 1,\\r\\n                other.readUint8(otherprevoff)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Compares two serial numbers using RFC1982 serial number math.\\r\\n     */\\r\\n    function serialNumberGte(uint32 i1, uint32 i2)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        unchecked {\\r\\n            return int32(i1) - int32(i2) >= 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function progress(bytes memory body, uint256 off)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return off + 1 + body.readUint8(off);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Computes the keytag for a chunk of data.\\r\\n     * @param data The data to compute a keytag for.\\r\\n     * @return The computed key tag.\\r\\n     */\\r\\n    function computeKeytag(bytes memory data) internal pure returns (uint16) {\\r\\n        /* This function probably deserves some explanation.\\r\\n         * The DNSSEC keytag function is a checksum that relies on summing up individual bytes\\r\\n         * from the input string, with some mild bitshifting. Here's a Naive solidity implementation:\\r\\n         *\\r\\n         *     function computeKeytag(bytes memory data) internal pure returns (uint16) {\\r\\n         *         uint ac;\\r\\n         *         for (uint i = 0; i < data.length; i++) {\\r\\n         *             ac += i & 1 == 0 ? uint16(data.readUint8(i)) << 8 : data.readUint8(i);\\r\\n         *         }\\r\\n         *         return uint16(ac + (ac >> 16));\\r\\n         *     }\\r\\n         *\\r\\n         * The EVM, with its 256 bit words, is exceedingly inefficient at doing byte-by-byte operations;\\r\\n         * the code above, on reasonable length inputs, consumes over 100k gas. But we can make the EVM's\\r\\n         * large words work in our favour.\\r\\n         *\\r\\n         * The code below works by treating the input as a series of 256 bit words. It first masks out\\r\\n         * even and odd bytes from each input word, adding them to two separate accumulators `ac1` and `ac2`.\\r\\n         * The bytes are separated by empty bytes, so as long as no individual sum exceeds 2^16-1, we're\\r\\n         * effectively summing 16 different numbers with each EVM ADD opcode.\\r\\n         *\\r\\n         * Once it's added up all the inputs, it has to add all the 16 bit values in `ac1` and `ac2` together.\\r\\n         * It does this using the same trick - mask out every other value, shift to align them, add them together.\\r\\n         * After the first addition on both accumulators, there's enough room to add the two accumulators together,\\r\\n         * and the remaining sums can be done just on ac1.\\r\\n         */\\r\\n        unchecked {\\r\\n            require(data.length <= 8192, \\\"Long keys not permitted\\\");\\r\\n            uint256 ac1;\\r\\n            uint256 ac2;\\r\\n            for (uint256 i = 0; i < data.length + 31; i += 32) {\\r\\n                uint256 word;\\r\\n                assembly {\\r\\n                    word := mload(add(add(data, 32), i))\\r\\n                }\\r\\n                if (i + 32 > data.length) {\\r\\n                    uint256 unused = 256 - (data.length - i) * 8;\\r\\n                    word = (word >> unused) << unused;\\r\\n                }\\r\\n                ac1 +=\\r\\n                    (word &\\r\\n                        0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >>\\r\\n                    8;\\r\\n                ac2 += (word &\\r\\n                    0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF);\\r\\n            }\\r\\n            ac1 =\\r\\n                (ac1 &\\r\\n                    0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) +\\r\\n                ((ac1 &\\r\\n                    0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >>\\r\\n                    16);\\r\\n            ac2 =\\r\\n                (ac2 &\\r\\n                    0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) +\\r\\n                ((ac2 &\\r\\n                    0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >>\\r\\n                    16);\\r\\n            ac1 = (ac1 << 8) + ac2;\\r\\n            ac1 =\\r\\n                (ac1 &\\r\\n                    0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) +\\r\\n                ((ac1 &\\r\\n                    0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >>\\r\\n                    32);\\r\\n            ac1 =\\r\\n                (ac1 &\\r\\n                    0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) +\\r\\n                ((ac1 &\\r\\n                    0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >>\\r\\n                    64);\\r\\n            ac1 =\\r\\n                (ac1 &\\r\\n                    0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) +\\r\\n                (ac1 >> 128);\\r\\n            ac1 += (ac1 >> 16) & 0xFFFF;\\r\\n            return uint16(ac1);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb0b007a6090573e7c38aab9ee872fa5bad50d4dd92888cc7854793a384120581\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\ninterface ENS {\\r\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\r\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\r\\n\\r\\n    // Logged when the owner of a node transfers ownership to a new account.\\r\\n    event Transfer(bytes32 indexed node, address owner);\\r\\n\\r\\n    // Logged when the resolver for a node changes.\\r\\n    event NewResolver(bytes32 indexed node, address resolver);\\r\\n\\r\\n    // Logged when the TTL of a node changes\\r\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\r\\n\\r\\n    // Logged when an operator is added or removed.\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    function setRecord(\\r\\n        bytes32 node,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeRecord(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external;\\r\\n\\r\\n    function setSubnodeOwner(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function setResolver(bytes32 node, address resolver) external;\\r\\n\\r\\n    function setOwner(bytes32 node, address owner) external;\\r\\n\\r\\n    function setTTL(bytes32 node, uint64 ttl) external;\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    function owner(bytes32 node) external view returns (address);\\r\\n\\r\\n    function resolver(bytes32 node) external view returns (address);\\r\\n\\r\\n    function ttl(bytes32 node) external view returns (uint64);\\r\\n\\r\\n    function recordExists(bytes32 node) external view returns (bool);\\r\\n\\r\\n    function isApprovedForAll(address owner, address operator)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x268291d051d64dd127af9ab7e97d30aada7995042e82c12e70acc305895ad349\"},\"contracts/registry/ENSRegistry.sol\":{\"content\":\"pragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"./ENS.sol\\\";\\r\\n\\r\\n/**\\r\\n * The ENS registry contract.\\r\\n */\\r\\ncontract ENSRegistry is ENS {\\r\\n    struct Record {\\r\\n        address owner;\\r\\n        address resolver;\\r\\n        uint64 ttl;\\r\\n    }\\r\\n\\r\\n    mapping(bytes32 => Record) records;\\r\\n    mapping(address => mapping(address => bool)) operators;\\r\\n\\r\\n    // Permits modifications only by the owner of the specified node.\\r\\n    modifier authorised(bytes32 node) {\\r\\n        address owner = records[node].owner;\\r\\n        require(owner == msg.sender || operators[owner][msg.sender]);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Constructs a new ENS registry.\\r\\n     */\\r\\n    constructor() public {\\r\\n        records[0x0].owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the record for a node.\\r\\n     * @param node The node to update.\\r\\n     * @param owner The address of the new owner.\\r\\n     * @param resolver The address of the resolver.\\r\\n     * @param ttl The TTL in seconds.\\r\\n     */\\r\\n    function setRecord(\\r\\n        bytes32 node,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external virtual override {\\r\\n        setOwner(node, owner);\\r\\n        _setResolverAndTTL(node, resolver, ttl);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the record for a subnode.\\r\\n     * @param node The parent node.\\r\\n     * @param label The hash of the label specifying the subnode.\\r\\n     * @param owner The address of the new owner.\\r\\n     * @param resolver The address of the resolver.\\r\\n     * @param ttl The TTL in seconds.\\r\\n     */\\r\\n    function setSubnodeRecord(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) external virtual override {\\r\\n        bytes32 subnode = setSubnodeOwner(node, label, owner);\\r\\n        _setResolverAndTTL(subnode, resolver, ttl);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of a node to a new address. May only be called by the current owner of the node.\\r\\n     * @param node The node to transfer ownership of.\\r\\n     * @param owner The address of the new owner.\\r\\n     */\\r\\n    function setOwner(bytes32 node, address owner)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        authorised(node)\\r\\n    {\\r\\n        _setOwner(node, owner);\\r\\n        emit Transfer(node, owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.\\r\\n     * @param node The parent node.\\r\\n     * @param label The hash of the label specifying the subnode.\\r\\n     * @param owner The address of the new owner.\\r\\n     */\\r\\n    function setSubnodeOwner(\\r\\n        bytes32 node,\\r\\n        bytes32 label,\\r\\n        address owner\\r\\n    ) public virtual override authorised(node) returns (bytes32) {\\r\\n        bytes32 subnode = keccak256(abi.encodePacked(node, label));\\r\\n        _setOwner(subnode, owner);\\r\\n        emit NewOwner(node, label, owner);\\r\\n        return subnode;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the resolver address for the specified node.\\r\\n     * @param node The node to update.\\r\\n     * @param resolver The address of the resolver.\\r\\n     */\\r\\n    function setResolver(bytes32 node, address resolver)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        authorised(node)\\r\\n    {\\r\\n        emit NewResolver(node, resolver);\\r\\n        records[node].resolver = resolver;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the TTL for the specified node.\\r\\n     * @param node The node to update.\\r\\n     * @param ttl The TTL in seconds.\\r\\n     */\\r\\n    function setTTL(bytes32 node, uint64 ttl)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        authorised(node)\\r\\n    {\\r\\n        emit NewTTL(node, ttl);\\r\\n        records[node].ttl = ttl;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Enable or disable approval for a third party (\\\"operator\\\") to manage\\r\\n     *  all of `msg.sender`'s ENS records. Emits the ApprovalForAll event.\\r\\n     * @param operator Address to add to the set of authorized operators.\\r\\n     * @param approved True if the operator is approved, false to revoke approval.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        operators[msg.sender][operator] = approved;\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address that owns the specified node.\\r\\n     * @param node The specified node.\\r\\n     * @return address of the owner.\\r\\n     */\\r\\n    function owner(bytes32 node)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        address addr = records[node].owner;\\r\\n        if (addr == address(this)) {\\r\\n            return address(0x0);\\r\\n        }\\r\\n\\r\\n        return addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the resolver for the specified node.\\r\\n     * @param node The specified node.\\r\\n     * @return address of the resolver.\\r\\n     */\\r\\n    function resolver(bytes32 node)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        return records[node].resolver;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the TTL of a node, and any records associated with it.\\r\\n     * @param node The specified node.\\r\\n     * @return ttl of the node.\\r\\n     */\\r\\n    function ttl(bytes32 node) public view virtual override returns (uint64) {\\r\\n        return records[node].ttl;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether a record has been imported to the registry.\\r\\n     * @param node The specified node.\\r\\n     * @return Bool if record exists\\r\\n     */\\r\\n    function recordExists(bytes32 node)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return records[node].owner != address(0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Query if an address is an authorized operator for another address.\\r\\n     * @param owner The address that owns the records.\\r\\n     * @param operator The address that acts on behalf of the owner.\\r\\n     * @return True if `operator` is an approved operator for `owner`, false otherwise.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator)\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return operators[owner][operator];\\r\\n    }\\r\\n\\r\\n    function _setOwner(bytes32 node, address owner) internal virtual {\\r\\n        records[node].owner = owner;\\r\\n    }\\r\\n\\r\\n    function _setResolverAndTTL(\\r\\n        bytes32 node,\\r\\n        address resolver,\\r\\n        uint64 ttl\\r\\n    ) internal {\\r\\n        if (resolver != records[node].resolver) {\\r\\n            records[node].resolver = resolver;\\r\\n            emit NewResolver(node, resolver);\\r\\n        }\\r\\n\\r\\n        if (ttl != records[node].ttl) {\\r\\n            records[node].ttl = ttl;\\r\\n            emit NewTTL(node, ttl);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf33ae189a0d2fa097386217fd2e68ee14328dabf189b931272bfce25d9ffc674\"},\"contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"./profiles/IVersionableResolver.sol\\\";\\r\\n\\r\\nabstract contract ResolverBase is ERC165, IVersionableResolver {\\r\\n    mapping(bytes32 => uint64) public recordVersions;\\r\\n\\r\\n    function isAuthorised(bytes32 node) internal view virtual returns (bool);\\r\\n\\r\\n    modifier authorised(bytes32 node) {\\r\\n        require(isAuthorised(node));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Increments the record version associated with an ENS node.\\r\\n     * May only be called by the owner of that node in the ENS registry.\\r\\n     * @param node The node to update.\\r\\n     */\\r\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\r\\n        recordVersions[node]++;\\r\\n        emit VersionChanged(node, recordVersions[node]);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceID)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceID == type(IVersionableResolver).interfaceId ||\\r\\n            super.supportsInterface(interfaceID);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x193bef54d6ca8c4e6a746c9671cab73df3e97a36dea45a66e97977a6337e53f4\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/AddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"../ResolverBase.sol\\\";\\r\\nimport \\\"./IAddrResolver.sol\\\";\\r\\nimport \\\"./IAddressResolver.sol\\\";\\r\\n\\r\\nabstract contract AddrResolver is\\r\\n    IAddrResolver,\\r\\n    IAddressResolver,\\r\\n    ResolverBase\\r\\n{\\r\\n    uint256 private constant COIN_TYPE_ETH = 60;\\r\\n\\r\\n    mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes))) versionable_addresses;\\r\\n\\r\\n    /**\\r\\n     * Sets the address associated with an ENS node.\\r\\n     * May only be called by the owner of that node in the ENS registry.\\r\\n     * @param node The node to update.\\r\\n     * @param a The address to set.\\r\\n     */\\r\\n    function setAddr(bytes32 node, address a)\\r\\n        external\\r\\n        virtual\\r\\n        authorised(node)\\r\\n    {\\r\\n        setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the address associated with an ENS node.\\r\\n     * @param node The ENS node to query.\\r\\n     * @return The associated address.\\r\\n     */\\r\\n    function addr(bytes32 node)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address payable)\\r\\n    {\\r\\n        bytes memory a = addr(node, COIN_TYPE_ETH);\\r\\n        if (a.length == 0) {\\r\\n            return payable(0);\\r\\n        }\\r\\n        return bytesToAddress(a);\\r\\n    }\\r\\n\\r\\n    function setAddr(\\r\\n        bytes32 node,\\r\\n        uint256 coinType,\\r\\n        bytes memory a\\r\\n    ) public virtual authorised(node) {\\r\\n        emit AddressChanged(node, coinType, a);\\r\\n        if (coinType == COIN_TYPE_ETH) {\\r\\n            emit AddrChanged(node, bytesToAddress(a));\\r\\n        }\\r\\n        versionable_addresses[recordVersions[node]][node][coinType] = a;\\r\\n    }\\r\\n\\r\\n    function addr(bytes32 node, uint256 coinType)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return versionable_addresses[recordVersions[node]][node][coinType];\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceID)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceID == type(IAddrResolver).interfaceId ||\\r\\n            interfaceID == type(IAddressResolver).interfaceId ||\\r\\n            super.supportsInterface(interfaceID);\\r\\n    }\\r\\n\\r\\n    function bytesToAddress(bytes memory b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address payable a)\\r\\n    {\\r\\n        require(b.length == 20);\\r\\n        assembly {\\r\\n            a := div(mload(add(b, 32)), exp(256, 12))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addressToBytes(address a) internal pure returns (bytes memory b) {\\r\\n        b = new bytes(20);\\r\\n        assembly {\\r\\n            mstore(add(b, 32), mul(a, exp(256, 12)))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf5e77e301631efcabce08cea9c19b1dbad07edeeabf5939909e2c3d3d1c0d6a6\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/**\\r\\n * Interface for the legacy (ETH-only) addr function.\\r\\n */\\r\\ninterface IAddrResolver {\\r\\n    event AddrChanged(bytes32 indexed node, address a);\\r\\n\\r\\n    /**\\r\\n     * Returns the address associated with an ENS node.\\r\\n     * @param node The ENS node to query.\\r\\n     * @return The associated address.\\r\\n     */\\r\\n    function addr(bytes32 node) external view returns (address payable);\\r\\n}\\r\\n\",\"keccak256\":\"0xc28e76da1c1d807c571ad75c169fa8496a8c63f21a4955171cf36b709924de20\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/**\\r\\n * Interface for the new (multicoin) addr function.\\r\\n */\\r\\ninterface IAddressResolver {\\r\\n    event AddressChanged(\\r\\n        bytes32 indexed node,\\r\\n        uint256 coinType,\\r\\n        bytes newAddress\\r\\n    );\\r\\n\\r\\n    function addr(bytes32 node, uint256 coinType)\\r\\n        external\\r\\n        view\\r\\n        returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x784c3ee0b979a9be20958a63fb17c2f652d3acf99dccb3ceba1f4c54e0278aa9\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\ninterface IVersionableResolver {\\r\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\r\\n\\r\\n    function recordVersions(bytes32 node) external view returns (uint64);\\r\\n}\\r\\n\",\"keccak256\":\"0x5f1b4de08824e89dd4a8e8aef8c96cfddd8579ac25e9fbb6e1efb14ba23ddea7\",\"license\":\"MIT\"},\"contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Controllable is Ownable {\\r\\n    mapping(address => bool) public controllers;\\r\\n\\r\\n    event ControllerChanged(address indexed controller, bool enabled);\\r\\n\\r\\n    modifier onlyController() {\\r\\n        require(\\r\\n            controllers[msg.sender],\\r\\n            \\\"Controllable: Caller is not a controller\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setController(address controller, bool enabled) public onlyOwner {\\r\\n        controllers[controller] = enabled;\\r\\n        emit ControllerChanged(controller, enabled);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3447a0afba4673bd715f1f459c71831cc87e085507fb455cea97883453e63374\"},\"contracts/root/Root.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../registry/ENS.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./Controllable.sol\\\";\\r\\n\\r\\ncontract Root is Ownable, Controllable {\\r\\n    bytes32 private constant ROOT_NODE = bytes32(0);\\r\\n\\r\\n    bytes4 private constant INTERFACE_META_ID =\\r\\n        bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\r\\n\\r\\n    event TLDLocked(bytes32 indexed label);\\r\\n\\r\\n    ENS public ens;\\r\\n    mapping(bytes32 => bool) public locked;\\r\\n\\r\\n    constructor(ENS _ens) public {\\r\\n        ens = _ens;\\r\\n    }\\r\\n\\r\\n    function setSubnodeOwner(bytes32 label, address owner)\\r\\n        external\\r\\n        onlyController\\r\\n    {\\r\\n        require(!locked[label]);\\r\\n        ens.setSubnodeOwner(ROOT_NODE, label, owner);\\r\\n    }\\r\\n\\r\\n    function setResolver(address resolver) external onlyOwner {\\r\\n        ens.setResolver(ROOT_NODE, resolver);\\r\\n    }\\r\\n\\r\\n    function lock(bytes32 label) external onlyOwner {\\r\\n        emit TLDLocked(label);\\r\\n        locked[label] = true;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceID)\\r\\n        external\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return interfaceID == INTERFACE_META_ID;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd328b591ce0bad3b68b18665e59e6844b7e7f6232c6cb7e3e7ada6f656dff64a\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001ef038038062001ef08339810160408190526200003491620000f5565b6001600160a01b03831660a08190526040519081527fb3eacd0e351fafdfefdec84e1cd19679b38dbcd63ea7c2c24da17fd2bc3b3c0e9060200160405180910390a1600080546001600160a01b0319166001600160a01b0384169081179091556040519081527f9176b7f47e4504df5e5516c99d90d82ac7cbd49cc77e7f22ba2ac2f2e3a3eba89060200160405180910390a16001600160a01b031660805250620001499050565b6001600160a01b0381168114620000f257600080fd5b50565b6000806000606084860312156200010b57600080fd5b83516200011881620000dc565b60208501519093506200012b81620000dc565b60408501519092506200013e81620000dc565b809150509250925092565b60805160a051611d42620001ae60003960008181610182015261088c01526000818161015b015281816103b4015281816104ff015281816105b8015281816106500152818161080b01528181610d3001528181610e740152610fa50152611d426000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806329d566301161005b57806329d566301461011857806330349ebe1461012b5780633f15457f146101565780637dc0d1d01461017d57600080fd5b806301ffc9a71461008d57806306963218146100b55780631ecfc411146100ca57806325916d41146100dd575b600080fd5b6100a061009b3660046116cf565b6101a4565b60405190151581526020015b60405180910390f35b6100c86100c3366004611911565b61023d565b005b6100c86100d836600461199a565b61061e565b6101036100eb3660046119b7565b60016020526000908152604090205463ffffffff1681565b60405163ffffffff90911681526020016100ac565b6100c86101263660046119d0565b6107ae565b60005461013e906001600160a01b031681565b6040516001600160a01b0390911681526020016100ac565b61013e7f000000000000000000000000000000000000000000000000000000000000000081565b61013e7f000000000000000000000000000000000000000000000000000000000000000081565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061023757507fffffffff0000000000000000000000000000000000000000000000000000000082167f2f43542800000000000000000000000000000000000000000000000000000000145b92915050565b600080600061024c8787610882565b91945092509050336001600160a01b038216146102d65760405162461bcd60e51b815260206004820152602d60248201527f4f6e6c79206f776e65722063616e2063616c6c2070726f7665416e64436c616960448201527f6d576974685265736f6c7665720000000000000000000000000000000000000060648201526084015b60405180910390fd5b6001600160a01b03841615610563576001600160a01b0385166103615760405162461bcd60e51b815260206004820152602660248201527f43616e6e6f74207365742061646472206966207265736f6c766572206973206e60448201527f6f7420736574000000000000000000000000000000000000000000000000000060648201526084016102cd565b6040517f5ef2c7f000000000000000000000000000000000000000000000000000000000815260048101849052602481018390523060448201526001600160a01b038681166064830152600060848301527f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a401600060405180830381600087803b1580156103f857600080fd5b505af115801561040c573d6000803e3d6000fd5b505050506000838360405160200161042e929190918252602082015260400190565b60408051808303601f190181529082905280516020909101207fd5fa2b00000000000000000000000000000000000000000000000000000000008252600482018190526001600160a01b03878116602484015290925087169063d5fa2b0090604401600060405180830381600087803b1580156104aa57600080fd5b505af11580156104be573d6000803e3d6000fd5b50506040517f5b0fc9c3000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b0385811660248301527f0000000000000000000000000000000000000000000000000000000000000000169250635b0fc9c39150604401600060405180830381600087803b15801561054557600080fd5b505af1158015610559573d6000803e3d6000fd5b5050505050610615565b6040517f5ef2c7f000000000000000000000000000000000000000000000000000000000815260048101849052602481018390526001600160a01b0382811660448301528681166064830152600060848301527f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a401600060405180830381600087803b1580156105fc57600080fd5b505af1158015610610573d6000803e3d6000fd5b505050505b50505050505050565b6040517f02571be3000000000000000000000000000000000000000000000000000000008152600060048201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906302571be390602401602060405180830381865afa15801561069f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c39190611a34565b90506000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107299190611a34565b9050336001600160a01b0382161461074057600080fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0385169081179091556040519081527f9176b7f47e4504df5e5516c99d90d82ac7cbd49cc77e7f22ba2ac2f2e3a3eba89060200160405180910390a1505050565b60008060006107bd8585610882565b6040517f06ab592300000000000000000000000000000000000000000000000000000000815260048101849052602481018390526001600160a01b03828116604483015293965091945092507f0000000000000000000000000000000000000000000000000000000000000000909116906306ab5923906064016020604051808303816000875af1158015610856573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087a9190611a51565b505050505050565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bdf95fef876040518263ffffffff1660e01b81526004016108d69190611aba565b600060405180830381865afa1580156108f3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261091b9190810190611b5d565b9092509050600061092c8882610b9f565b60ff16905061093d88600183610bc3565b9450600061097061094f836001611c0a565b6001848c5161095e9190611c1d565b6109689190611c1d565b8b9190610be7565b6000546040517f4f89059e0000000000000000000000000000000000000000000000000000000081529192506001600160a01b031690634f89059e906109ba908490600401611c30565b602060405180830381865afa1580156109d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fb9190611c43565b610a6d5760405162461bcd60e51b815260206004820152602360248201527f506172656e74206e616d65206d7573742062652061207075626c69632073756660448201527f666978000000000000000000000000000000000000000000000000000000000060648201526084016102cd565b610a78816000610c69565b965060008787604051602001610a98929190918252602082015260400190565b60408051808303601f190181529181528151602092830120600081815260019093529082205490925063ffffffff16850360030b1215610b04576040517f2dd6a7af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff8616179055610b4a8a86611026565b5080965050856001600160a01b0316817f87db02a0e483e2818060eddcbb3488ce44e35aff49a70d92c2aa6c8046cf01e28c87604051610b8b929190611c65565b60405180910390a350505050509250925092565b6000828281518110610bb357610bb3611c8d565b016020015160f81c905092915050565b8251600090610bd28385611c0a565b1115610bdd57600080fd5b5091016020012090565b8251606090610bf68385611c0a565b1115610c0157600080fd5b60008267ffffffffffffffff811115610c1c57610c1c611711565b6040519080825280601f01601f191660200182016040528015610c46576020820181803683370190505b50905060208082019086860101610c5e828287611112565b509095945050505050565b600080610c768484610b9f565b60ff16905080600003610c8d575060009050610237565b6000610cad85610c9d8487611c0a565b610ca8906001611c0a565b610c69565b90506000610cc7610cbf866001611c0a565b879085610bc3565b604080516020810185905290810182905290915060600160408051601f198184030181529082905280516020909101207f02571be30000000000000000000000000000000000000000000000000000000082526004820181905294506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa158015610d77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9b9190611a34565b90506001600160a01b0381161580610dbb57506001600160a01b03811630145b610e2d5760405162461bcd60e51b815260206004820152602a60248201527f43616e6e6f7420656e61626c652061206e616d65206f776e656420627920736f60448201527f6d656f6e6520656c73650000000000000000000000000000000000000000000060648201526084016102cd565b6001600160a01b038116301461101c5782610f69576040517f02571be3000000000000000000000000000000000000000000000000000000008152600060048201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906302571be390602401602060405180830381865afa158015610ec3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee79190611a34565b6040517f8cb8ecec000000000000000000000000000000000000000000000000000000008152600481018590523060248201529091506001600160a01b03821690638cb8ecec90604401600060405180830381600087803b158015610f4b57600080fd5b505af1158015610f5f573d6000803e3d6000fd5b505050505061101c565b6040517f06ab592300000000000000000000000000000000000000000000000000000000815260048101849052602481018390523060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906306ab5923906064016020604051808303816000875af1158015610ff6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101a9190611a51565b505b5050505092915050565b600080611046604051806040016040528060608152602001600081525090565b61105e855160056110579190611c0a565b8290611168565b5060408051808201909152600581527f045f656e73000000000000000000000000000000000000000000000000000000602082015261109e9082906111cd565b506110a981866111cd565b5060006110b685826111fb565b90505b80515160208201511015611101576000806110d8878460a0015161125c565b9250905081156110f15794506001935061110b92505050565b50506110fc816112cd565b6110b9565b5060008092509250505b9250929050565b6020811061114a5781518352611129602084611c0a565b9250611136602083611c0a565b9150611143602082611c1d565b9050611112565b905182516020929092036101000a6000190180199091169116179052565b604080518082019091526060815260006020820152611188602083611ca3565b156111b057611198602083611ca3565b6111a3906020611c1d565b6111ad9083611c0a565b91505b506020828101829052604080518085526000815290920101905290565b6040805180820190915260608152600060208201526111f4838460000151518485516113b5565b9392505050565b6112496040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b82815260c08101829052610237816112cd565b6000805b83518310156112c15760006112758585610b9f565b60ff169050611285600185611c0a565b935060008061129587878561149f565b9250905081156112ad5793506001925061110b915050565b6112b78387611c0a565b9550505050611260565b50600093849350915050565b60c081015160208201819052815151116112e45750565b60006112f8826000015183602001516114fc565b82602001516113079190611c0a565b8251909150611316908261155e565b61ffff16604083015261132a600282611c0a565b8251909150611339908261155e565b61ffff16606083015261134d600282611c0a565b825190915061135c9082611586565b63ffffffff166080830152611372600482611c0a565b8251909150600090611384908361155e565b61ffff169050611395600283611c0a565b60a0840181905291506113a88183611c0a565b60c0909301929092525050565b60408051808201909152606081526000602082015282518211156113d857600080fd5b60208501516113e78386611c0a565b111561141a5761141a8561140a876020015187866114059190611c0a565b6115b0565b611415906002611cc5565b6115c7565b6000808651805187602083010193508088870111156114395787860182525b505050602084015b602084106114795780518252611458602083611c0a565b9150611465602082611c0a565b9050611472602085611c1d565b9350611441565b51815160001960208690036101000a019081169019919091161790525083949350505050565b6000806114ac8585611586565b63ffffffff1663613d3078146114c7575060009050806114f4565b602c8310156114db575060009050806114f4565b6114ef856114ea866004611c0a565b6115e4565b915091505b935093915050565b6000815b8351811061151057611510611cdc565b600061151c8583610b9f565b60ff16905061152c816001611c0a565b6115369083611c0a565b915080600003611546575061154c565b50611500565b6115568382611c1d565b949350505050565b815160009061156e836002611c0a565b111561157957600080fd5b50016002015161ffff1690565b8151600090611596836004611c0a565b11156115a157600080fd5b50016004015163ffffffff1690565b6000818311156115c1575081610237565b50919050565b81516115d38383611168565b506115de83826111cd565b50505050565b60008060288385516115f69190611c1d565b10156116075750600090508061110b565b6000835b611616856028611c0a565b8110156116c35760049190911b9060006116308783610b9f565b60ff169050603081101580156116465750603a81105b1561165f57611656603082611c1d565b831792506116b0565b604181101580156116705750604781105b1561168057611656603782611c1d565b606181101580156116915750606781105b156116a157611656605782611c1d565b6000809450945050505061110b565b50806116bb81611cf2565b91505061160b565b50946001945092505050565b6000602082840312156116e157600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146111f457600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561174a5761174a611711565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561177957611779611711565b604052919050565b600067ffffffffffffffff82111561179b5761179b611711565b50601f01601f191660200190565b600082601f8301126117ba57600080fd5b81356117cd6117c882611781565b611750565b8181528460208386010111156117e257600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261181057600080fd5b8135602067ffffffffffffffff8083111561182d5761182d611711565b8260051b61183c838201611750565b938452858101830193838101908886111561185657600080fd5b84880192505b858310156118ed578235848111156118745760008081fd5b88016040818b03601f190181131561188c5760008081fd5b611894611727565b87830135878111156118a65760008081fd5b6118b48d8a838701016117a9565b8252509082013590868211156118ca5760008081fd5b6118d88c89848601016117a9565b8189015284525050918401919084019061185c565b98975050505050505050565b6001600160a01b038116811461190e57600080fd5b50565b6000806000806080858703121561192757600080fd5b843567ffffffffffffffff8082111561193f57600080fd5b61194b888389016117a9565b9550602087013591508082111561196157600080fd5b5061196e878288016117ff565b935050604085013561197f816118f9565b9150606085013561198f816118f9565b939692955090935050565b6000602082840312156119ac57600080fd5b81356111f4816118f9565b6000602082840312156119c957600080fd5b5035919050565b600080604083850312156119e357600080fd5b823567ffffffffffffffff808211156119fb57600080fd5b611a07868387016117a9565b93506020850135915080821115611a1d57600080fd5b50611a2a858286016117ff565b9150509250929050565b600060208284031215611a4657600080fd5b81516111f4816118f9565b600060208284031215611a6357600080fd5b5051919050565b60005b83811015611a85578181015183820152602001611a6d565b50506000910152565b60008151808452611aa6816020860160208601611a6a565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611b4f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc089840301855281518051878552611b2388860182611a8e565b91890151858303868b0152919050611b3b8183611a8e565b968901969450505090860190600101611ae1565b509098975050505050505050565b60008060408385031215611b7057600080fd5b825167ffffffffffffffff811115611b8757600080fd5b8301601f81018513611b9857600080fd5b8051611ba66117c882611781565b818152866020838501011115611bbb57600080fd5b611bcc826020830160208601611a6a565b809450505050602083015163ffffffff81168114611be957600080fd5b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561023757610237611bf4565b8181038181111561023757610237611bf4565b6020815260006111f46020830184611a8e565b600060208284031215611c5557600080fd5b815180151581146111f457600080fd5b604081526000611c786040830185611a8e565b905063ffffffff831660208301529392505050565b634e487b7160e01b600052603260045260246000fd5b600082611cc057634e487b7160e01b600052601260045260246000fd5b500690565b808202811582820484141761023757610237611bf4565b634e487b7160e01b600052600160045260246000fd5b60006000198203611d0557611d05611bf4565b506001019056fea264697066735822122086eee0e4ce74404c003b02d186c28603ddf236622ff290c29729cc4e797bc4bd64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806329d566301161005b57806329d566301461011857806330349ebe1461012b5780633f15457f146101565780637dc0d1d01461017d57600080fd5b806301ffc9a71461008d57806306963218146100b55780631ecfc411146100ca57806325916d41146100dd575b600080fd5b6100a061009b3660046116cf565b6101a4565b60405190151581526020015b60405180910390f35b6100c86100c3366004611911565b61023d565b005b6100c86100d836600461199a565b61061e565b6101036100eb3660046119b7565b60016020526000908152604090205463ffffffff1681565b60405163ffffffff90911681526020016100ac565b6100c86101263660046119d0565b6107ae565b60005461013e906001600160a01b031681565b6040516001600160a01b0390911681526020016100ac565b61013e7f000000000000000000000000000000000000000000000000000000000000000081565b61013e7f000000000000000000000000000000000000000000000000000000000000000081565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061023757507fffffffff0000000000000000000000000000000000000000000000000000000082167f2f43542800000000000000000000000000000000000000000000000000000000145b92915050565b600080600061024c8787610882565b91945092509050336001600160a01b038216146102d65760405162461bcd60e51b815260206004820152602d60248201527f4f6e6c79206f776e65722063616e2063616c6c2070726f7665416e64436c616960448201527f6d576974685265736f6c7665720000000000000000000000000000000000000060648201526084015b60405180910390fd5b6001600160a01b03841615610563576001600160a01b0385166103615760405162461bcd60e51b815260206004820152602660248201527f43616e6e6f74207365742061646472206966207265736f6c766572206973206e60448201527f6f7420736574000000000000000000000000000000000000000000000000000060648201526084016102cd565b6040517f5ef2c7f000000000000000000000000000000000000000000000000000000000815260048101849052602481018390523060448201526001600160a01b038681166064830152600060848301527f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a401600060405180830381600087803b1580156103f857600080fd5b505af115801561040c573d6000803e3d6000fd5b505050506000838360405160200161042e929190918252602082015260400190565b60408051808303601f190181529082905280516020909101207fd5fa2b00000000000000000000000000000000000000000000000000000000008252600482018190526001600160a01b03878116602484015290925087169063d5fa2b0090604401600060405180830381600087803b1580156104aa57600080fd5b505af11580156104be573d6000803e3d6000fd5b50506040517f5b0fc9c3000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b0385811660248301527f0000000000000000000000000000000000000000000000000000000000000000169250635b0fc9c39150604401600060405180830381600087803b15801561054557600080fd5b505af1158015610559573d6000803e3d6000fd5b5050505050610615565b6040517f5ef2c7f000000000000000000000000000000000000000000000000000000000815260048101849052602481018390526001600160a01b0382811660448301528681166064830152600060848301527f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a401600060405180830381600087803b1580156105fc57600080fd5b505af1158015610610573d6000803e3d6000fd5b505050505b50505050505050565b6040517f02571be3000000000000000000000000000000000000000000000000000000008152600060048201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906302571be390602401602060405180830381865afa15801561069f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c39190611a34565b90506000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107299190611a34565b9050336001600160a01b0382161461074057600080fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0385169081179091556040519081527f9176b7f47e4504df5e5516c99d90d82ac7cbd49cc77e7f22ba2ac2f2e3a3eba89060200160405180910390a1505050565b60008060006107bd8585610882565b6040517f06ab592300000000000000000000000000000000000000000000000000000000815260048101849052602481018390526001600160a01b03828116604483015293965091945092507f0000000000000000000000000000000000000000000000000000000000000000909116906306ab5923906064016020604051808303816000875af1158015610856573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087a9190611a51565b505050505050565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bdf95fef876040518263ffffffff1660e01b81526004016108d69190611aba565b600060405180830381865afa1580156108f3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261091b9190810190611b5d565b9092509050600061092c8882610b9f565b60ff16905061093d88600183610bc3565b9450600061097061094f836001611c0a565b6001848c5161095e9190611c1d565b6109689190611c1d565b8b9190610be7565b6000546040517f4f89059e0000000000000000000000000000000000000000000000000000000081529192506001600160a01b031690634f89059e906109ba908490600401611c30565b602060405180830381865afa1580156109d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fb9190611c43565b610a6d5760405162461bcd60e51b815260206004820152602360248201527f506172656e74206e616d65206d7573742062652061207075626c69632073756660448201527f666978000000000000000000000000000000000000000000000000000000000060648201526084016102cd565b610a78816000610c69565b965060008787604051602001610a98929190918252602082015260400190565b60408051808303601f190181529181528151602092830120600081815260019093529082205490925063ffffffff16850360030b1215610b04576040517f2dd6a7af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff8616179055610b4a8a86611026565b5080965050856001600160a01b0316817f87db02a0e483e2818060eddcbb3488ce44e35aff49a70d92c2aa6c8046cf01e28c87604051610b8b929190611c65565b60405180910390a350505050509250925092565b6000828281518110610bb357610bb3611c8d565b016020015160f81c905092915050565b8251600090610bd28385611c0a565b1115610bdd57600080fd5b5091016020012090565b8251606090610bf68385611c0a565b1115610c0157600080fd5b60008267ffffffffffffffff811115610c1c57610c1c611711565b6040519080825280601f01601f191660200182016040528015610c46576020820181803683370190505b50905060208082019086860101610c5e828287611112565b509095945050505050565b600080610c768484610b9f565b60ff16905080600003610c8d575060009050610237565b6000610cad85610c9d8487611c0a565b610ca8906001611c0a565b610c69565b90506000610cc7610cbf866001611c0a565b879085610bc3565b604080516020810185905290810182905290915060600160408051601f198184030181529082905280516020909101207f02571be30000000000000000000000000000000000000000000000000000000082526004820181905294506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa158015610d77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9b9190611a34565b90506001600160a01b0381161580610dbb57506001600160a01b03811630145b610e2d5760405162461bcd60e51b815260206004820152602a60248201527f43616e6e6f7420656e61626c652061206e616d65206f776e656420627920736f60448201527f6d656f6e6520656c73650000000000000000000000000000000000000000000060648201526084016102cd565b6001600160a01b038116301461101c5782610f69576040517f02571be3000000000000000000000000000000000000000000000000000000008152600060048201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906302571be390602401602060405180830381865afa158015610ec3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee79190611a34565b6040517f8cb8ecec000000000000000000000000000000000000000000000000000000008152600481018590523060248201529091506001600160a01b03821690638cb8ecec90604401600060405180830381600087803b158015610f4b57600080fd5b505af1158015610f5f573d6000803e3d6000fd5b505050505061101c565b6040517f06ab592300000000000000000000000000000000000000000000000000000000815260048101849052602481018390523060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906306ab5923906064016020604051808303816000875af1158015610ff6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101a9190611a51565b505b5050505092915050565b600080611046604051806040016040528060608152602001600081525090565b61105e855160056110579190611c0a565b8290611168565b5060408051808201909152600581527f045f656e73000000000000000000000000000000000000000000000000000000602082015261109e9082906111cd565b506110a981866111cd565b5060006110b685826111fb565b90505b80515160208201511015611101576000806110d8878460a0015161125c565b9250905081156110f15794506001935061110b92505050565b50506110fc816112cd565b6110b9565b5060008092509250505b9250929050565b6020811061114a5781518352611129602084611c0a565b9250611136602083611c0a565b9150611143602082611c1d565b9050611112565b905182516020929092036101000a6000190180199091169116179052565b604080518082019091526060815260006020820152611188602083611ca3565b156111b057611198602083611ca3565b6111a3906020611c1d565b6111ad9083611c0a565b91505b506020828101829052604080518085526000815290920101905290565b6040805180820190915260608152600060208201526111f4838460000151518485516113b5565b9392505050565b6112496040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b82815260c08101829052610237816112cd565b6000805b83518310156112c15760006112758585610b9f565b60ff169050611285600185611c0a565b935060008061129587878561149f565b9250905081156112ad5793506001925061110b915050565b6112b78387611c0a565b9550505050611260565b50600093849350915050565b60c081015160208201819052815151116112e45750565b60006112f8826000015183602001516114fc565b82602001516113079190611c0a565b8251909150611316908261155e565b61ffff16604083015261132a600282611c0a565b8251909150611339908261155e565b61ffff16606083015261134d600282611c0a565b825190915061135c9082611586565b63ffffffff166080830152611372600482611c0a565b8251909150600090611384908361155e565b61ffff169050611395600283611c0a565b60a0840181905291506113a88183611c0a565b60c0909301929092525050565b60408051808201909152606081526000602082015282518211156113d857600080fd5b60208501516113e78386611c0a565b111561141a5761141a8561140a876020015187866114059190611c0a565b6115b0565b611415906002611cc5565b6115c7565b6000808651805187602083010193508088870111156114395787860182525b505050602084015b602084106114795780518252611458602083611c0a565b9150611465602082611c0a565b9050611472602085611c1d565b9350611441565b51815160001960208690036101000a019081169019919091161790525083949350505050565b6000806114ac8585611586565b63ffffffff1663613d3078146114c7575060009050806114f4565b602c8310156114db575060009050806114f4565b6114ef856114ea866004611c0a565b6115e4565b915091505b935093915050565b6000815b8351811061151057611510611cdc565b600061151c8583610b9f565b60ff16905061152c816001611c0a565b6115369083611c0a565b915080600003611546575061154c565b50611500565b6115568382611c1d565b949350505050565b815160009061156e836002611c0a565b111561157957600080fd5b50016002015161ffff1690565b8151600090611596836004611c0a565b11156115a157600080fd5b50016004015163ffffffff1690565b6000818311156115c1575081610237565b50919050565b81516115d38383611168565b506115de83826111cd565b50505050565b60008060288385516115f69190611c1d565b10156116075750600090508061110b565b6000835b611616856028611c0a565b8110156116c35760049190911b9060006116308783610b9f565b60ff169050603081101580156116465750603a81105b1561165f57611656603082611c1d565b831792506116b0565b604181101580156116705750604781105b1561168057611656603782611c1d565b606181101580156116915750606781105b156116a157611656605782611c1d565b6000809450945050505061110b565b50806116bb81611cf2565b91505061160b565b50946001945092505050565b6000602082840312156116e157600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146111f457600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561174a5761174a611711565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561177957611779611711565b604052919050565b600067ffffffffffffffff82111561179b5761179b611711565b50601f01601f191660200190565b600082601f8301126117ba57600080fd5b81356117cd6117c882611781565b611750565b8181528460208386010111156117e257600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261181057600080fd5b8135602067ffffffffffffffff8083111561182d5761182d611711565b8260051b61183c838201611750565b938452858101830193838101908886111561185657600080fd5b84880192505b858310156118ed578235848111156118745760008081fd5b88016040818b03601f190181131561188c5760008081fd5b611894611727565b87830135878111156118a65760008081fd5b6118b48d8a838701016117a9565b8252509082013590868211156118ca5760008081fd5b6118d88c89848601016117a9565b8189015284525050918401919084019061185c565b98975050505050505050565b6001600160a01b038116811461190e57600080fd5b50565b6000806000806080858703121561192757600080fd5b843567ffffffffffffffff8082111561193f57600080fd5b61194b888389016117a9565b9550602087013591508082111561196157600080fd5b5061196e878288016117ff565b935050604085013561197f816118f9565b9150606085013561198f816118f9565b939692955090935050565b6000602082840312156119ac57600080fd5b81356111f4816118f9565b6000602082840312156119c957600080fd5b5035919050565b600080604083850312156119e357600080fd5b823567ffffffffffffffff808211156119fb57600080fd5b611a07868387016117a9565b93506020850135915080821115611a1d57600080fd5b50611a2a858286016117ff565b9150509250929050565b600060208284031215611a4657600080fd5b81516111f4816118f9565b600060208284031215611a6357600080fd5b5051919050565b60005b83811015611a85578181015183820152602001611a6d565b50506000910152565b60008151808452611aa6816020860160208601611a6a565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611b4f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc089840301855281518051878552611b2388860182611a8e565b91890151858303868b0152919050611b3b8183611a8e565b968901969450505090860190600101611ae1565b509098975050505050505050565b60008060408385031215611b7057600080fd5b825167ffffffffffffffff811115611b8757600080fd5b8301601f81018513611b9857600080fd5b8051611ba66117c882611781565b818152866020838501011115611bbb57600080fd5b611bcc826020830160208601611a6a565b809450505050602083015163ffffffff81168114611be957600080fd5b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561023757610237611bf4565b8181038181111561023757610237611bf4565b6020815260006111f46020830184611a8e565b600060208284031215611c5557600080fd5b815180151581146111f457600080fd5b604081526000611c786040830185611a8e565b905063ffffffff831660208301529392505050565b634e487b7160e01b600052603260045260246000fd5b600082611cc057634e487b7160e01b600052601260045260246000fd5b500690565b808202811582820484141761023757610237611bf4565b634e487b7160e01b600052600160045260246000fd5b60006000198203611d0557611d05611bf4565b506001019056fea264697066735822122086eee0e4ce74404c003b02d186c28603ddf236622ff290c29729cc4e797bc4bd64736f6c63430008110033",
  "devdoc": {
    "details": "An ENS registrar that allows the owner of a DNS name to claim the      corresponding name in ENS.",
    "kind": "dev",
    "methods": {
      "proveAndClaim(bytes,(bytes,bytes)[])": {
        "details": "Submits proofs to the DNSSEC oracle, then claims a name using those proofs.",
        "params": {
          "input": "A chain of signed DNS RRSETs ending with a text record.",
          "name": "The name to claim, in DNS wire format."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4425,
        "contract": "contracts/dnsregistrar/DNSRegistrar.sol:DNSRegistrar",
        "label": "suffixes",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(PublicSuffixList)4992"
      },
      {
        "astId": 4429,
        "contract": "contracts/dnsregistrar/DNSRegistrar.sol:DNSRegistrar",
        "label": "inceptions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_uint32)"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(PublicSuffixList)4992": {
        "encoding": "inplace",
        "label": "contract PublicSuffixList",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}